package com.vimond.automation.PageObject;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindAll;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.vimond.automation.Utility.TestUtils;

public class UserAdminPageObj {

    private WebDriver driver;
    TestUtils elements;

    public UserAdminPageObj(WebDriver driver) {
	this.driver = driver;
	elements = new TestUtils(driver);
    }

    @FindBy(xpath = "//a[contains(text(),'Accounts')]")
    public WebElement UserAdminMenu;

    public void clickUserAdminMenu() {

	System.out.println("Clicking on User Admin menu");
	elements.waitForElementFluently(UserAdminMenu, 10);
	UserAdminMenu.click();
    }

    @FindBy(css = "button[class='cms-button']")
    public WebElement createNewUserButton;

    public void clickCreateNewUser() {
	System.out.println("Clicking on Create New User button");
	elements.waitForElementFluently(createNewUserButton, 10);
	createNewUserButton.click();
    }

    // Add New User button present in Center pane
    @FindBy(css = "div.admin-empty-content button.cms-button.secondary")
    public WebElement addNewUserButton;

    // Click on the "Add New User" button
    public void clickAddNewUser() {
	checkProgressSpinnerNotShown();
	System.out.println("Clicking on Add New User button");
	elements.waitForElementFluently(addNewUserButton, 10);
	addNewUserButton.click();
	elements.waitForElementToBeInvisible(By.xpath("//div[@class='admin-empty-content']"), 10);
    }

    // ------------------------------------------------------------------------------------------------------------------
    /*
     * 
     * BEGINNING OF SEARCH FIELDS
     */
    // Search field
    /* @FindBy(css = "input.field") */
    @FindBy(css = "input")
    public WebElement searchUserInputBox;

    // Clicking on search field to bring focus on it
    public void clickSearchField() throws InterruptedException {
	searchUserInputBox.clear();
	searchUserInputBox.click();
	Thread.sleep(2000);
    }

    // Enter search value
    public void enterSearchUser(String searchData) {
	System.out.println("Entering data in Search User");
	searchUserInputBox.clear();
	searchUserInputBox.sendKeys(searchData);
	searchUserInputBox.sendKeys(org.openqa.selenium.Keys.ENTER);
	try {
	    Thread.sleep(2000);
	} catch (InterruptedException e) {
	    e.printStackTrace();
	}// wait for search result to be shown
    }

    // Search icon old
    @FindBy(css = "button.cms-button.search-button")
    public WebElement searchButton;

    // new search button
    @FindBy(css = "button.core-button.search-button")
    public WebElement searchButtonNew;

    public void clickSearchButton() {
	System.out.println("Clicking on Search User button");
	elements.waitForElementFluently(searchButtonNew, 10);
	searchButtonNew.click();
	checkProgressSpinnerNotShown();
    }

    // Spinner element
    @FindBy(css = "div.progress-radial.spinner")
    public WebElement progressSpinner;

    // Check if progress spinner is shown
    public void checkProgressSpinnerShown() {
	elements.waitForElementFluently(progressSpinner, 2);// just wait for 2
							    // seconds to check
							    // this element
    }

    // Check if progress spinner is not shown
    public void checkProgressSpinnerNotShown() {
	elements.waitForElementToBeInvisible(By.cssSelector("div.progress-radial.spinner"), 30);
    }

    public void clickMoreDropdown() throws InterruptedException {
	driver.findElement(By.cssSelector(".module-title.dropdown-button")).click();
	Thread.sleep(2000);
    }

    // Search results
    @FindAll({ @FindBy(css = "div.list.admin-sidebar-users > ul > li.list-item") })
    public List<WebElement> searchResults;

    // Search results
    @FindAll({ @FindBy(css = "div.user-renderer") })
    public List<WebElement> FilterResults;

    public void selectSearchResult(int index) {
	System.out.println("Clicking on Search result");
	searchResults.get(index).click();
    }

    public void selectFilterResults(int index) {
	System.out.println("Clicking on FilterResults");
	// TBD:Not tested if scroll required
	FilterResults.get(index).click();
    }

    public void checkStatusInSearchResults(String status) {

    }

    // Clear-search button
    @FindBy(css = "button.cms-button.select-clear")
    public WebElement clearSearchButton;

    public void clickClearSearchButton() {
	System.out.println("Clicking on clear search button");
	elements.waitForElementFluently(clearSearchButton, 10);
	clearSearchButton.click();
    }

    // END OF SEARCH FIELDS

    // ------------------------------------------------------------------------------------------------------------------
    /*
     * FILTER SECTION
     */

    // OLD FUNCTION - INVALID DUE TO NEW USER ADMIN IN 1.10.1
    // // Filter button
    // @FindBy(css = "button.cms-button.menu-button")
    // public WebElement filterButton;
    //
    // public void clickFilterButton() {
    // System.out.println("Clicking on Filterbutton");
    // elements.waitForElementFluently(filterButton, 10);
    // filterButton.click();
    // }

    /*
     * Filters 1:Company filter 2:Status filter 3:Role filter
     */
    @FindAll({ @FindBy(xpath = "//div[@class='quick-filter']/div") })
    // "div.filter-bar > div.quick-filter > div.material-select-v2"
    public List<WebElement> filterDropdowns;

    @FindBy(css = "div.core-select.has-content > div.input-wrapper")
    // "div.filter-bar > div.quick-filter > div.material-select-v2"
    public WebElement StatusDropdown;

    @FindBy(css = " div.icon-wrapper.validated_waiting")
    // "div.filter-bar > div.quick-filter > div.material-select-v2"
    public WebElement AwaitingApproval_StatusDropdown;

    @FindBy(css = "//div[@id='application']/span/div/div[2]/div/div/div[2]/div[2]/div/div[2]/div/span/div/div/div")
    // "div.filter-bar > div.quick-filter > div.material-select-v2"
    public WebElement New_StatusDropdown;

    public void selectStatus(int index) {
	elements.waitForElementFluently(New_StatusDropdown, 20);
	driver.findElement(
		By.xpath("//div[@id='application']/span/div/div[2]/div/div/div[2]/div[2]/div/div[2]/div/span/div/div/div["
			+ index + "]")).click();
    }

    /*
     * Select Status value
     * 
     * 0:All status 1:New 2:Confirmed 3:Awaiting approval 4:Approved 5:Rejected 6:Deactivated
     */
    public void selectStatusValue(String input) {
	elements.waitForElementFluently(filterDropdowns.get(1), 20);

	// Open status dropdown
	filterDropdowns.get(1).findElement(By.cssSelector("div.input-wrapper > div.icon-wrapper > span")).click();

	// copy the status values in a list
	elements.waitForElementsFluently(
		filterDropdowns.get(1).findElements(By.xpath("//div[contains(@class, 'options-list')]/div")), 10);
	List<WebElement> statusValues = filterDropdowns.get(1).findElements(
		By.xpath("//div[contains(@class, 'options-list')]/div"));

	// initialize index value with required status
	int index = 0;
	switch (input) {
	case "All status":
	    index = 0;
	    break;
	case "New":
	    index = 1;
	    break;
	case "Confirmed":
	    index = 2;
	    break;
	case "Awaiting approval":
	    index = 3;
	    break;
	case "Approved":
	    index = 4;
	    break;
	case "Rejected":
	    index = 5;
	    break;
	case "Deactivated":
	    index = 6;
	    break;
	default:
	    index = 0;// default to "All Status"
	}

	// click on required index
	JavascriptExecutor executor = (JavascriptExecutor) driver;
	executor.executeScript("arguments[0].click();", statusValues.get(index));
	// statusValues.get(index).click();
    }

    // Show selected Status value
    public String getSelectedStatusFilter() {
	return filterDropdowns.get(1).findElement(By.cssSelector("div.input-wrapper input")).getAttribute("value");
    }

    // Show selected Status value
    public String getSelectedCompanyFilter() {
	return filterDropdowns.get(0).findElement(By.cssSelector("div.input-wrapper input")).getAttribute("value");
    }

    // Show selected Status value
    public String getSelectedRoleFilter() {
	return filterDropdowns.get(2).findElement(By.cssSelector("div.input-wrapper input")).getAttribute("value");
    }

    // END OF FILTER SECTION

    // ------------------------------------------------------------------------------------------------------------------
    /*
     * USER FORM HEADER FIELDS
     */
    // User Header field
    @FindBy(css = "div.user-header")
    public WebElement userHeaderElement;

    // User name header
    @FindBy(css = "a.pluggable-user-email.edit-user-action")
    public WebElement userNameHeader;

    // User status dropdown
    @FindBy(css = "div.user-input-wrapper div.column:nth-of-type(2)  > div > div.input-wrapper > input")
    // div.user-input-wrapper div.column:nth-of-type(2) > div.core-select > div.input-wrapper > input
    public WebElement userStatusDropdown;

    // List of status values
    @FindAll({ @FindBy(xpath = "//div[contains(@class, 'options-list')]/div") })
    List<WebElement> statusValueList;

    // Return value of User name header
    public String getUserNameHeader() {
	elements.waitForElementFluently(userNameHeader, 10);
	return userNameHeader.getText();
    }

    /*
     * User Status Values 0:New 1:Confirmed 2:Awaiting approval 3:Approved 4:Rejected 5:Deactivated
     */
    public void selectUserStatus(String newStatus) {
	// Find matching index to be selected
	int indexToSelect;
	switch (newStatus) {
	case "New":
	    indexToSelect = 0;
	    break;
	case "Confirmed":
	    indexToSelect = 1;
	    break;
	case "Awaiting approval":
	    indexToSelect = 2;
	    break;
	case "Approved":
	    indexToSelect = 3;
	    break;
	case "Rejected":
	    indexToSelect = 4;
	    break;
	case "Deactivated":
	    indexToSelect = 5;
	    break;
	default:
	    indexToSelect = 3; // default to Approved status
	}

	// BELOW METHOD OF INPUT VIA KEYBOARD NOT WORKING IN NEW ADMIN.
	// HENCE KEEPING CODE FOR LEGACY PURPOSE. TO BE DELETED IF NO IMPACT SEEN.
	// // Navigating the dropdown via arrow key and pressing "Enter" on
	// // reaching the required status
	// Actions action = new Actions(driver);
	// for (int i = 0; i < indexToSelect; i++) {
	// action.sendKeys(org.openqa.selenium.Keys.ARROW_DOWN).build().perform();
	// }
	// action.sendKeys(org.openqa.selenium.Keys.ENTER);

	// Click user status dropdown
	((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", userStatusDropdown);
	userStatusDropdown.click();

	// Click on desired status
	// WebElement statusValue = userHeaderElement.findElement(By
	// .cssSelector("div.material-select-v2-options-list > div:nth-of-type(" + indexToSelect + ")"));
	elements.waitForElementsFluently(statusValueList, 10);
	WebElement statusValue = statusValueList.get(indexToSelect);
	statusValue.click();
    }

    // Get user status value
    public String getUserStatus() {
	elements.waitForElementFluently(userStatusDropdown, 10);
	return userStatusDropdown.getAttribute("value");
    }

    // END OF USER FORM HEADER FIELDS

    // ------------------------------------------------------------------------------------------------------------------
    /*
     * Order of the keys 0:First Name, 1:Last Name, 2:Email 3:Password, 4:Title 5:Phone, 6:Address 7:City, 8:Zipcode
     * 9:Country, 10:Status 11:Roles
     */
    // User form field list
    @FindAll({ @FindBy(css = "div.user-info div.input-wrapper input") })
    public List<WebElement> inputFields;

    public void enterUserData(int key, String value) {
	elements.waitForElementsFluently(inputFields, 10);

	// Scroll to the required field if required
	JavascriptExecutor js = ((JavascriptExecutor) driver);
	js.executeScript("arguments[0].scrollIntoView(true);", inputFields.get(key));

	// clear field and enter value
	inputFields.get(key).sendKeys(Keys.chord(Keys.CONTROL, "a"), value);
    }

    // User form field list
    @FindAll({ @FindBy(css = "input.unsaved") })
    public List<WebElement> inputFields_unsaved;

    public void enterUserData_unsaved(int key, String value) {
	elements.waitForElementsFluently(inputFields_unsaved, 10);

	// Scroll to the required field if required
	JavascriptExecutor js = ((JavascriptExecutor) driver);
	js.executeScript("arguments[0].scrollIntoView(true);", inputFields_unsaved.get(key));

	// Enter value
	inputFields_unsaved.get(key).sendKeys(value);
    }

    public String getUserData_unsaved(int key) {
	return inputFields_unsaved.get(key).getAttribute("value").toString();
    }

    public String getUserData(int key) {
	return inputFields.get(key).getAttribute("value").toString();
    }

    // User form field list after discard
    @FindAll({ @FindBy(xpath = "//div[@id='application']/span/div/div[2]/div/div/div[2]/div[2]/div/div/div/div/input") })
    public List<WebElement> inputFields_Discard;

    public String getUserData_Discard(int key) {
	return inputFields_Discard.get(key).getAttribute("value").toString();
    }

    // Country dropdown
    @FindBy(css = "span.field[placeholder='Select country']")
    public WebElement countryField;

    public void selectCountry(String country) {
	Select countryDropdown = new Select(countryField);
	countryDropdown.selectByVisibleText(country);
    }

    // State dropdown
    @FindBy(css = "span.field[placeholder='Select state']")
    public WebElement stateField;

    public void selectState(String state) {
	Select statesDropdown = new Select(stateField);
	statesDropdown.selectByVisibleText(state);
    }

    // Roles dropdown
    @FindBy(css = "div.new-user-form div.tag-editor-container div.input-wrapper input")
    public WebElement roleField;

    // Click on role dropdown to expand
    public void clickRoleField() {
	JavascriptExecutor js = ((JavascriptExecutor) driver);
	js.executeScript("arguments[0].scrollIntoView(true);", roleField);
	roleField.click();
	elements.waitForElementToBeInvisible(By.xpath("//div[@class='core-select']"), 10);
    }

    // Fetch all role elements from the expanded dropdown
    @FindAll({ @FindBy(xpath = "//div[contains(@class, 'options-list')]/div") })
    // div.new-user-form div.tag-editor-container span div.core-select-options-list > div
    List<WebElement> roleValues;

    @FindBy(css = "div.new-user-form div.tag-editor-container div.core-select div.input-wrapper input")
    public WebElement roleFieldNew;
    // Fetch all role elements from the expanded dropdown
    @FindAll({ @FindBy(css = "div.new-user-form div.tag-editor-container div.core-select div.input-wrapper input span div.core-select-options > div.core-select-options-list > div") })
    List<WebElement> roleValuesSelect;
    @FindBy(css = "div.core-select-option")
    public List<WebElement> roleValuesList;
    @FindBy(css = "#first-name")
    public WebElement firstname;
    @FindBy(css = "#last-name")
    public WebElement lastname;
    @FindBy(css = "#email")
    public WebElement email;
    @FindBy(css = "#password")
    public WebElement password;

    // Select a role from the expanded dropdown
    public void selectRole2(String roleToSelect) {
	elements.waitForElementsFluently(roleValuesSelect, 10);
	// Match the required role and click to select
	for (int i = 0; i < roleValuesSelect.size(); i++) {
	    if (roleValuesSelect.get(i).getText().toLowerCase().equals(roleToSelect.toLowerCase())) {
		roleValuesSelect.get(i).click();
		break;
	    }
	}
    }

    // Select a role from the expanded dropdown
    public void selectRole(String roleToSelect) {
	elements.waitForElementsFluently(roleValues, 10);
	// Match the required role and click to select
	for (int i = 0; i < roleValues.size(); i++) {
	    if (roleValues.get(i).getText().toLowerCase().equals(roleToSelect.toLowerCase())) {
		roleValues.get(i).click();
		break;
	    }
	}

	// wait for dropdown to close
	elements.waitForElementToBeInvisible(By.xpath("//div[@class='core-select focus']"), 10);
    }

    // Save button in New User Form
    @FindBy(xpath = "//div[@class='action-buttons']/button[2]")
    // Old >> //(css = "div.action-buttons button.cms-button.primary")
    WebElement newUserSaveButton;

    // Click on Save button in New User Form
    public void clickNewUserSaveButton() {
	System.out.println("Clicking on Save button");
	((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", newUserSaveButton);
	elements.waitForElementFluently(newUserSaveButton, 10);
	newUserSaveButton.click();

	// wait for the loading icon to disappear
	checkProgressSpinnerNotShown();
    }

    // Cancel button
    @FindBy(css = "div.action-buttons button.cms-button.tertiary")
    WebElement cancelButton;

    // Click on Cancel button
    public void clickCancelButton() {
	System.out.println("Clicking on Discard button");
	elements.waitForElementFluently(cancelButton, 10);
	cancelButton.click();
    }

    // Discard button
    @FindBy(css = "button.cms-button.secondary")
    WebElement discardButton;

    // Click on Discard button
    public void clickDiscardButton() {
	System.out.println("Clicking on Discard button");
	elements.waitForElementFluently(discardButton, 10);
	discardButton.click();
	elements.waitForElementToBeInvisible(By.xpath("//button[@class='cms-button secondary']"), 10);
    }

    // Become This User button
    @FindBy(css = "div.become-container > button")
    public WebElement becomeThisUserButton;

    public void clickBecomeThisUserButton() {
	becomeThisUserButton.click();
    }

    // label to show if any changes have appeared
    @FindBy(css = "div.admin-footer > div.save-container > span.changes")
    WebElement labelForChange;

    // get value of label labelForChange
    public String getLabelForChange() {
	elements.waitForElementFluently(labelForChange, 10);
	return labelForChange.getText();
    }

    @FindBy(css = "div.user-renderer")
    public List<WebElement> searchResultList;
    @FindBy(css = "button.add")
    public WebElement addICON;
    // -------------------------------
    // First Username in the Account Section
    @FindBy(xpath = "//div[contains(@class, 'admin-sidebar-users focus')]/ul/li[1]/div")
    public WebElement firstAccountsUsername;

    // Click on the First Username in the Account Section
    public void clickFirstAccountsUsername() {
	elements.waitForElementFluently(firstAccountsUsername, 10);
	firstAccountsUsername.click();
	checkProgressSpinnerNotShown();
    }

    // Click on the '+' sign icon in the Account Section
    @FindBy(xpath = "//button[@class='add']")
    public WebElement addUser;

    public void clickAddUser() {
	elements.waitForElementFluently(addUser, 10);
	addUser.click();
	WebElement popup = driver.findElement(By.xpath("//div[@class='core-modal core-lightbox simple']"));
	elements.waitForElementFluently(popup, 10);
    }

    // Company Name from header
    @FindBy(xpath = "//div[@class='company-name']")
    public WebElement companyName;

    // Get Company Name from header
    public String getCompanyName() {
	elements.waitForElementFluently(companyName, 10);
	return companyName.getText();
    }

    // Email ID from text field
    @FindBy(xpath = "//input[@id='email']")
    public WebElement Emailid;

    // Get Email ID from text field
    public String getEmailText() {
	elements.waitForElementFluently(Emailid, 10);
	return Emailid.getAttribute("value");
    }

    // Email ID header
    @FindBy(xpath = "//div[@class='company-email']")
    public WebElement Emailidheader;

    // Get Email Id from header
    public String getEmailHeaderText() {
	elements.waitForElementFluently(Emailidheader, 10);
	return Emailidheader.getText();
    }

    // Save button (button shown when editing a user)
    @FindBy(xpath = "//div[@class='save-container']/button[2]")
    public WebElement saveButton;

    // Role Dropdown
    @FindBy(xpath = "//div[contains(text(),'Add more roles...')]/following-sibling::div/span")
    public WebElement role;

    // Click on role dropdown to expand
    public void clickRole() {
	((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", role);
	role.click();
    }

    // Find all the Roles
    @FindAll({ @FindBy(xpath = "//span/div/div[@class='core-select-options-list']/div") })
    List<WebElement> allRoles;

    // Select a role from the expanded dropdown
    public void selectARole(String roleToSelect) {
	elements.waitForElementsFluently(allRoles, 10);
	// Match the required role and click to select
	for (int i = 0; i < allRoles.size(); i++) {
	    if (allRoles.get(i).getText().toLowerCase().equals(roleToSelect.toLowerCase())) {
		allRoles.get(i).click();
		break;
	    }
	}
    }

    // Click on Save button (shown when editing a user)
    public void clickSaveButton() {
	System.out.println("Clicking on Save button");
	// ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", saveButton2);
	elements.waitForElementToBeClickable(saveButton, 10);
	saveButton.click();

	// wait for loading icon to disappear
	checkProgressSpinnerNotShown();

	// the spinner seems to be appearing twice
	checkProgressSpinnerNotShown();
    }

    // First Name
    @FindBy(xpath = "//input[@id='first-name']")
    WebElement firstName;

    // Send FirstName
    public void setFirstName(String input) {
	firstName.clear();
	firstName.sendKeys(input);
    }

    // Get Firstname
    public String getFirstName() {
	return firstName.getAttribute("value");
    }

    // Last name
    @FindBy(xpath = "//input[@id='last-name']")
    WebElement lastName;

    // Send LastName
    public void setLastName(String input) {
	lastName.clear();
	lastName.sendKeys(input);
    }

    // Email
    @FindBy(xpath = "//input[@id='email']")
    WebElement emailIdNewUser;

    // Send FirstName
    public void setEmail(String input) {
	emailIdNewUser.clear();
	emailIdNewUser.sendKeys(input);
    }

    // Password
    @FindBy(xpath = "//input[@id='password']")
    WebElement passwordNewUser;

    // Send FirstName
    public void setPassword(String input) {
	passwordNewUser.clear();
	passwordNewUser.sendKeys(input);
    }

    // "Edit" sign icon in the Account Section
    @FindBy(xpath = "//button[@class='edit']")
    public WebElement editUser;

    // Click on the "Edit" sign icon in the Account Section
    public void clickEditUser() {
	elements.waitForElementFluently(editUser, 10);
	editUser.click();
    }

    // "Edit" sign
    @FindBy(xpath = "//input[@id='company-name']")
    public WebElement companyEditName;

    // Get Company Name
    public String getCompanyEditName() {
	return companyEditName.getAttribute("value");
    }

    // Set Company Name
    public void setCompanyEditName(String input) {
	
	companyEditName.sendKeys(input);
    }

    // Discard Button
    @FindBy(xpath = "//div[@class='save-container']/button[@class='cms-button secondary']")
    public WebElement discardEditButton;

    // Click on Discard Button in Edit Section
    public void discardButtonClick() {
	elements.waitForElementToBeClickable(discardEditButton, 10);
	discardEditButton.click();
    }

    // Error Message
    @FindBy(xpath = "//div[@class='error-message']")
    public WebElement error;

    // Get Error Message text
    public String getErrorMessage() {
	elements.waitForElementFluently(error, 10);
	return error.getText();
    }

    // Blank password Error
    @FindBy(xpath = "//div[@class='core-input error']//div[@class='error-message']")
    public WebElement blankPasswordError;

    // Get Blank password error
    public String getBlankPasswordError() {
	elements.waitForElementFluently(blankPasswordError, 10);
	return blankPasswordError.getText();
    }

    // Upload Image File input
    @FindBy(xpath = "//input[@type='file']")
    public WebElement imageUpload;

    // Get Blank password error
    public void uploadImage(String input) {
	elements.waitForElementFluently(imageUpload, 10);
	imageUpload.sendKeys(input);
    }

    // Upload Image Failure Message for Invalid Image
    @FindBy(xpath = "//li[@class='failure']")
    public WebElement invalidImageUpload;

    // Get Blank password error
    public String getErrorInvalidImage() {
	elements.waitForElementFluently(invalidImageUpload, 10);
	return invalidImageUpload.getText();
    }

    // Confirmation OK button
    @FindBy(xpath = "//button[@class='cms-button primary']")
    public WebElement confirmationButton;

    // Click Confirmation OK button
    public void clickConfirmationButton() {
	elements.waitForElementFluently(confirmationButton, 10);
	confirmationButton.click();
    }

    // Upload Image Icon
    @FindBy(xpath = "//div[@class='image-upload-buttons']//span[@class='core-icon icon']")
    public WebElement uploadImageIcon;

    // Click the Upload Image bank icon
    public void clickUploadImageIcon() {
	elements.waitForElementFluently(uploadImageIcon, 10);
	((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", uploadImageIcon);
	uploadImageIcon.click();
    }

    // Upload Image Success Message
    @FindBy(xpath = "//div[contains(@class,'upload-info')]/ul/li[1]")
    public WebElement uploadImageMsg;

    // Get the Success message for image upload
    public String getUploadImageMessage() {
	elements.waitForElementFluently(uploadImageMsg, 10);
	return uploadImageMsg.getText();
    }

    // Uploaded Image path
    @FindBy(xpath = "//img[@class='ReactCrop--image-copy']")
    public WebElement uploadImagePath;

    // Get the path of uploaded image
    public String getUploadImagePath() {
	elements.waitForElementFluently(uploadImagePath, 10);
	return uploadImagePath.getAttribute("src");
    }

    // Header Image
    @FindBy(xpath = "//img[@class='cms-content-header-image']")
    public WebElement headerImage;

    // Get the path of Header image
    public String getHeaderImagePath() {
	elements.waitForElementFluently(headerImage, 10);
	return headerImage.getAttribute("src");
    }

    // List of users in Account tab
    @FindAll({ @FindBy(xpath = "//div[contains(@class,'list admin-sidebar-users focus')]/ul/li") })
    public List<WebElement> accoutsUserList;

    public int accountUserGetSize() {
	elements.waitForElementsFluently(accoutsUserList, 10);
	return accoutsUserList.size();

    }

    @FindBy(css = "div.core-infinite-scroll.cms-sidebar-list")
    public List<WebElement> ChannelList;

    @FindBy(css = "div.core-infinite-scroll.cms-sidebar-list>div")
    public List<WebElement> ChannelListItem;

    // first channel tirle
    @FindBy(css = "div.core-infinite-scroll.cms-sidebar-list>div>div>div:nth-of-type(2)>span")
    public List<WebElement> ChannelTitle_First;
    
 // first channel tirle
    @FindBy(css = "button.core-button.core-icon-button.close")
    public WebElement closeBTN_createUserWindow;
    

}
